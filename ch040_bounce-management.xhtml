<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title/></head><body><h1>Bounce Management
</h1>
<h2>Introduction to bounce management
</h2>
<p>Whenever an email is sent via the internet, regardless of the email software used, the email is transmitted by an MTA (Mail Transport Agent).&#160; In most cases the MTA is the internet provider&#8217;s SMTP mail server, sending to the MTA of the email&#8217;s recipient, through intermediary MTAs.
</p>
<p>If the email cannot be delivered to its recipient, the last MTA that tried to transmit the email generates an error email, called a bounce message, which is sent back to the sender&#8217;s email.
</p>
<p>Usually, this bounce message contains a specific error code that explains why your email could not be delivered to its recipient.
</p>
<p>phpList implements bounce management which handles these bounce messages, and provides automatic actions depending on the error code, like removing an incorrect email address.&#160;
</p>
<h2>Setting up basic bounce management
</h2>
<p>Basic bounce management counts bounces and unconfirms a user after a given number of consecutive bounces.&#160;
</p>
<h3>Setting your bounce address&#160;
</h3>
<p>In order to use bounce management, you need to provide an email address where the bounce messages are sent to (e.g.: bounce@example.com). This email address is usually called the Return Path. Note that this email address will only be added to the email headers, and will not be shown to your users.
</p>
<div>Once you have set up your return path email address, you may edit the config.php by adding the following:
</div>
<p><strong>$message_envelope = 'bounce@example.com;</strong>
</p>
<p>By default this setting is commented out (it has a # in front so will not be actioned).&#160;
</p>
<p><img src="/phplist/_edit/static/bounce_config_1.png" alt=""/></p>
<p>You will need to uncomment it (remove the hash) and change the email to reflect your new bounce email.
</p>
<p><img src="static/bounce_config_2.png" alt=""/>&#160;
</p>
<h3>pop or mbox&#160;
</h3>
<p>phpList can fetch emails from the bounce mailbox via two protocols, mbox protocol where mails are accessed directly within a folder on the server, and pop3 protocol where mails are downloaded just like a mail client program would do it. The latter one is usually the simplest option, especially if you don&#8217;t host your phpList setup yourself.
</p>
<p>You can specify which procotol to use in config.php with the following:
</p>
<p><strong># This can be 'pop' or 'mbox'</strong>
</p>
<p><strong>$bounce_protocol = 'pop';</strong>
</p>
<p>When accessing the bounce mailbox via mbox protocol, we need to tell phpList where the mbox files are. Edit config.php and add the following:
</p>
<p><strong># when the protocol is mbox specify this one</strong>
</p>
<p><strong># it needs to be a local file in mbox format, accessible to your webserver user</strong>
</p>
<p><strong>$bounce_mailbox = '/var/spool/mail/listbounces';</strong>
</p>
<p>When accessing the bounce mailbox via pop3 protocol, we need to tell phpList which server provides the emails, and the username and password for the mailbox in config.php like this:
</p>
<p><strong># when the protocol is pop, specify these three</strong>
</p>
<p><strong>$bounce_mailbox_host = 'pop.example.com';</strong>
</p>
<p><strong>$bounce_mailbox_user = 'popuser';</strong>
</p>
<p><strong>$bounce_mailbox_password = 'password';</strong>
</p>
<p>Additionally, you might want to set the default pop3 port and encryption with the following line (standard config):
</p>
<p><strong>$bounce_mailbox_port = "110/pop3/notls";</strong>
</p>
<p>Or enabling ssl on port 995 without verifying certificate common name of the certificate:
</p>
<p><strong>$bounce_mailbox_port = "995/pop3/novalidate-cert"</strong>
</p>
<h3>Setting up mailbox purge&#160;
</h3>
<p>Unless you&#8217;re doing some tests, you would want to delete bounce messages once they are fetched, so they won&#8217;t be counted twice:
</p>
<p><strong>$bounce_mailbox_purge = 1;</strong>
</p>
<p>You may also want to delete messages from the mailbox that could not be processed because they do not match a user in the system. Messages are still downloaded into phpList, so it&#8217;s safe to delete them from the mailbox.
</p>
<p><strong>$bounce_mailbox_purge_unprocessed = 1;</strong>
</p>
<p>You can define how many bounces in a row it needs for a user to be marked unconfirmed.
</p>
<p>Be aware that deleting processed bounce messages from phpList with advanced bounce rules will disable this functionality.
</p>
<p><strong>&#160;$bounce_unsubscribe_threshold = 5</strong>
</p>
<h2>Downloading and processing bounces&#160;
</h2>
<p>Downloading and processing bounces can be handled in the user interface under <strong>System</strong> &gt; <strong>Process Bounces</strong>.
</p>
<p>You may also setup a cron task to download and process bounces on a regular basis, see the chapter about cron tasks.
</p>
<p>In that case, you might want to disable the Process Bounces menu entry by adding the following:
</p>
<p><strong>define ("MANUALLY_PROCESS_BOUNCES",0);</strong>
</p>
<p><strong>define('BLACKLIST_EMAIL_ON_BOUNCE', 1</strong>);
</p>
<h2>Advanced bounce management
</h2>
<p>Advanced bounce management enables the automatic performance of various actions depending on the kind of bounce error code that is returned by the MTA.
</p>
<p>To enable it just add the following in config.php
</p>
<p><strong>define('USE_ADVANCED_BOUNCEHANDLING',1);</strong>
</p>
<p>Once this is set up, you may proceed in the phpList interface to <strong>System </strong>&gt; <strong>Manage Bounces</strong> &gt; <strong>List Bounces Rules</strong>
</p>
<p><img src="static/bounce_config_3.png" alt=""/>&#160;
</p>
<p>From there you may create new bounce rules, based on regular expressions that will trigger phpList actions.
</p>
<p>Regular expressions are sequences of characters that match a search pattern. While this manual won&#8217;t explain the use of regular expressions, we will analyse the examples given here.
</p>
<p>Bounce emails generally contain a header and a mail body that may, depending on the MTA that sent the email, give a reason why the initial email could not reach its recipient.
</p>
<p>An example bounce email could look like the following:
</p>
<p><strong>Final-Recipient: rfc822; someuser@example.com</strong>
</p>
<p><strong>Original-Recipient: rfc822;someuser@example.com</strong>
</p>
<p><strong>Action: failed</strong>
</p>
<p><strong>Status: 5.2.1</strong>
</p>
<p><strong>Remote-MTA: dns; mx1.example.com</strong>
</p>
<p><strong>Diagnostic-Code: smtp; 550 5.2.1 This mailbox has been blocked due to</strong>
</p>
<p><strong>inactivity (UserSearch)</strong>
</p>
<p>What we see here is the recipient&#8217;s MTA telling us that the user&#8217;s mailbox is blocked, probably because it&#8217;s not been used for a long while. There are some excellent articles about MTA responses on the internet. Every MTA programme has its own return messages. Also, you may have noticed that the return messages usually come with a 3 digit code, 5.2.2 in this example.
</p>
<p>This code is the error code corresponding to the return message, but some MTAs just give bogus codes, especially when they think your email is spam.
</p>
<p>Now let&#8217;s create our first bounce rule:
</p>
<p><img src="static/bounce_config_4.png" alt=""/><br/></p>
<p>The regular expression could be the exact sentence the MTA return message contained, in brackets.
</p>
<p>Now phpList provides multiple actions that can be triggered if a bounce email matches our regular expression:
</p>
<p>
</p>
<ul><li>Delete subscriber</li>
  <li>Unconfirm subscriber</li>
  <li>Blacklist subscriber</li>
  <li>Blacklist email address</li>
  <li>Delete subscriber and bounce</li>
  <li>Unconfirm subscriber and delete bounce</li>
  <li>Add subscriber to the do-not-send list and delete bounce</li>
  <li>Add email address to the do-not-send list and delete bounce</li>
  <li>Delete bounce.</li>
</ul><p>
</p>
<p>In our case, we can assume that our subscriber&#8217;s email address haven&#8217;t been used for a long while, and that it&#8217;s safe to unconfirm the subscriber.
</p>
<p>Now we have a choice between &#8220;unconfirm subscriber&#8221; and &#8220;unconfirm subscriber and delete bounce&#8221;. The only real difference between both options is that deleting the bounce message will also remove it from bounce statistics (using the BounceStatisticsPlugin).
</p>
<p>Once we finished our rule, we may add it and try it against our bounces.
</p>
<p>Back in phpList, we can check if our rule matches any of our actual bounces, by going to<strong> System </strong>&gt; <strong>Manage Bounces</strong> &gt; <strong>Check Current Bounce Rules</strong>.
</p>
<p>The system will then tell us how many bounces are caught by our rules.
</p>
<p>Now you may have a big list of bounces that aren't caught by the rule, and some of them are pretty similar to the rule.
</p>
<p>We may have multiple bounce messages that could say &#8220;account is disabled&#8221; or &#8220;This account has been disabled&#8221; which basically means the same as &#8220;mailbox has been blocked due to inactivity&#8221; of our first rule.
</p>
<p>Way may create two other rules to deal with these bounces, or improve our regular expression to match all these messages with the same rule.
</p>
<p>Regular expressions use the pipe symbol &#8220;|&#8221; as OR statement, meaning the following regular expression:
</p>
<p>(black|white) would match any text that has the words black or white in it.
</p>
<p>Now let&#8217;s improve our first rule by adding all our MTA return messages that basically mean the same thing:
</p>
<p><img src="/phplist/_edit/static/bounce_config_5.png" alt=""/></p>
<p>The actual regular expression I used here is:
</p>
<p>(account is disabled|This mailbox has been blocked due to inactivity|This account has been disabled|The email account that you tried to reach does not exist|This is a permanent error * local delivery failed)
</p>
<p>Note that the * is a wildcard token that means there can be up to zero characters between &#8220;This is a permanent error &#8220; and &#8220; local delivery failed&#8221;.
</p>
<p>This rule can now deal with any of these 5 return messages.
</p>
<p>Good starter rule set:
</p>
<p><img src="static/bounce_config_6.png" alt=""/><br/></p>
<h2>Rules to copy
</h2>
<p><strong>(Archived recipient.)&#160;</strong>Delete subscriber
</p>
<p><strong>(delivery error: dd This user doesn't have a yahoo.fr account|This user doesn't have a yahoo.fr account)&#160;</strong>Delete subscriber
</p>
<p><strong>(type=MX: Host not found)&#160;</strong>Delete subscriber. No mail records for the domain.
</p>
<p><strong>(sorry, no mailbox here by that name|Mailbox disabled|address not found in table|User mailbox is not local|mailbox not allowed|Mailbox syntax incorrect|RESOLVER\.ADR\.RecipNotFound)&#160;</strong>Delete subscriber and bounce. No ambiguity here, we can also delete the bounce message.
</p>
<p><strong>(account is disabled|This mailbox has been blocked due to inactivity|This account has been disabled|The email account that you tried to reach does not exist|This is a permanent error * local delivery failed)&#160;</strong>Delete subscriber and bounce. Same as above
</p>
<p><strong>(User unknown|Unknown user|Unknown address|No such recipient|No such user|The email account that you tried to reach is disabled|Recipient not found|Recipient unknown|Invalid recipient|Address unknown|Recipient address rejected)&#160;</strong>Delete subscriber and bounce. Same as above
</p>
<h2>Feedback
</h2>
<p>Discuss this chapter <a href="https://discuss.phplist.org/t/bounce-management-manual-chapter-feedback-and-discussion/231">here</a>.
</p></body></html>